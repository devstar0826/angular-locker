/*! angular-locker v1.2.1 | (c) 2015 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"sources":["angular-locker.min.js"],"names":["root","factory","define","amd","angular","exports","module","window","this","provider","_value","value","param","isFunction","_keyByVal","object","Object","keys","filter","key","_defined","isDefined","_error","msg","Error","defaults","driver","namespace","eventsEnabled","separator","config","$get","$window","$rootScope","$parse","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","_deriveDriver","_driver","_namespace","_eventsEnabled","_separator","_watchers","_checkSupport","isUndefined","_supported","l","setItem","removeItem","e","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","extend","_setItem","oldVal","_getItem","_exists","equals","oldValue","newValue","indexOf","getItem","_removeItem","prototype","put","isObject","forEach","add","has","get","def","isArray","items","k","arguments","length","forget","map","pull","all","split","splice","join","clean","empty","clear","count","bind","$scope","$eval","assign","self","$id","$watch","newVal","unbind","watchId","instance","getDriver","getNamespace","supported"],"mappings":"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","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return factory(root.angular);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root.angular || (window && window.angular));\n    } else {\n        factory(root.angular);\n    }\n})(this, function (angular) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @param  {Mixed}  parameter\n         * @return {Mixed}\n         */\n        var _value = function (value, param) {\n            return angular.isFunction(value) ? value(param) : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  object\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (object, value) {\n            return Object.keys(object).filter(function (key) { return object[key] === value; })[0];\n        };\n\n        /**\n         * Determine whether a value is defined and not null\n         *\n         * @param  {Mixed}  value\n         * @return {Boolean}\n         */\n        var _defined = function (value) {\n            return angular.isDefined(value) && value !== null;\n        };\n\n        /**\n         * Trigger an error\n         *\n         * @param  {String}  msg\n         * @return {void}\n         */\n        var _error = function (msg) {\n            throw new Error('[angular-locker] ' + msg);\n        };\n\n        /**\n         * Set the defaults\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker',\n            eventsEnabled: true,\n            separator: '.'\n        };\n\n        return {\n\n            /**\n             * Allow the defaults to be chosen\n             *\n             * @type {Object}\n             */\n            config: defaults,\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace) {\n\n                    /**\n                     * Out of the box drivers\n                     *\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            _error('The driver \"' + driver + '\" was not found.');\n                        }\n\n                        return this._registeredDrivers[driver];\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * @type {Boolean}\n                     */\n                    this._eventsEnabled = defaults.eventsEnabled;\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = defaults.separator;\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (angular.isUndefined(this._supported)) {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        if (! this._namespace) return key;\n\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String}  name\n                     * @param  {Object}  payload\n                     * @return {void}\n                     */\n                    this._event = function (name, payload) {\n                        if (! this._eventsEnabled) return;\n\n                        $rootScope.$emit(name, angular.extend(payload, {\n                            driver: this._deriveDriver(this._driver),\n                            namespace: this._namespace,\n                        }));\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        try {\n                            var oldVal = this._getItem(key);\n                            this._driver.setItem(this._getPrefix(key), this._serialize(value));\n                            if (this._exists(key) && ! angular.equals(oldVal, value)) {\n                                this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: value });\n                            } else {\n                                this._event('locker.item.added', { key: key, value: value });\n                            }\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                _error('The browser storage quota has been exceeded');\n                            } else {\n                                _error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._unserialize(this._driver.getItem(this._getPrefix(key)));\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        if (! this._exists(key)) return false;\n                        this._driver.removeItem(this._getPrefix(key));\n\n                        this._event('locker.item.forgotten', { key: key });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {self}\n                     */\n                    put: function (key, value) {\n                        if (! key) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! _defined(value)) return false;\n                            this._setItem(key, _value(value, this._getItem(key)));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {Boolean}\n                     */\n                    add: function (key, value) {\n                        if (! this.has(key)) {\n                            this.put(key, value);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            key.map(this._removeItem, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace/driver\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace/driver\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     * @return {self}\n                     */\n                    bind: function ($scope, key, def) {\n                        if (! _defined( $scope.$eval(key) )) {\n                            $parse(key).assign($scope, this.get(key, def));\n                            if (! this.has(key)) this.put(key, def);\n                        }\n\n                        var self = this;\n                        this._watchers[key + $scope.$id] = $scope.$watch(key, function (newVal) {\n                            if (_defined(newVal)) self.put(key, newVal);\n                        }, angular.isObject($scope[key]));\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @return {self}\n                     */\n                    unbind: function ($scope, key) {\n                        $parse(key).assign($scope, void 0);\n                        this.forget(key);\n\n                        var watchId = key + $scope.$id;\n\n                        if (this._watchers[watchId]) {\n                            // execute the de-registration function\n                            this._watchers[watchId]();\n                            delete this._watchers[watchId];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return this.instance(driver, this._namespace);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return this.instance(this._deriveDriver(this._driver), namespace);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    },\n\n                    /**\n                     * Get a new instance of Locker\n                     *\n                     * @param  {String}  driver\n                     * @param  {String}  namespace\n                     * @return {Locker}\n                     */\n                    instance: function (driver, namespace) {\n                        return new Locker(driver, namespace);\n                    }\n                };\n\n                // return the default instance\n                return new Locker(defaults.driver, defaults.namespace);\n            }]\n        };\n\n    });\n\n});\n"],"sourceRoot":"/source/"}