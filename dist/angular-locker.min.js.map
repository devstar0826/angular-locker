/*! angular-locker v0.6.3 | (c) 2014 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"sources":["angular-locker.min.js"],"names":["window","angular","module","config","$provide","decorator","$log","$delegate","exception","cause","debug","message","provider","_value","value","isFunction","_keyByVal","obj","Object","keys","filter","key","defaults","driver","namespace","setDefaultDriver","this","getDefaultDriver","setDefaultNamespace","getDefaultNamespace","$get","$window","$rootScope","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","Error","_deriveDriver","_driver","_namespace","_checkSupport","_supported","l","setItem","removeItem","e","_separator","_getPrefix","_serialize","toJson","_unserialize","fromJson","_setItem","$emit","indexOf","name","_getItem","getItem","_exists","_removeItem","prototype","put","isObject","forEach","isDefined","add","has","get","def","isArray","items","k","arguments","length","forget","pull","all","split","splice","join","clean","empty","clear","count","getDriver","getNamespace","supported","drivers"],"mappings":"CAUA,SAAUA,EAAQC,GAEd,YAEAA,GAAQC,OAAO,qBAEdC,OAAO,SAAUC,GAKdA,EAASC,UAAU,qBAAsB,OAAQ,YAAa,SAASC,EAAMC,GACzE,MAAO,UAASC,EAAWC,GACvBH,EAAKI,MAAM,sBAAwBF,EAAUG,SAC7CJ,EAAUC,EAAWC,SAKhCG,SAAS,SAAU,WAQhB,GAAIC,GAAS,SAAUC,GACnB,MAAOb,GAAQc,WAAWD,GAASA,IAAUA,GAU7CE,EAAY,SAAUC,EAAKH,GAC3B,MAAOI,QAAOC,KAAKF,GAAKG,OAAO,SAAUC,GAAO,MAAOJ,GAAII,KAASP,IAAU,IAQ9EQ,GACAC,OAAQ,QACRC,UAAW,SAGf,QAQIC,iBAAkB,SAAUF,GAExB,MADAD,GAASC,OAASV,EAAOU,GAClBG,MAMXC,iBAAkB,WACd,MAAOL,GAASC,QASpBK,oBAAqB,SAAUJ,GAE3B,MADAF,GAASE,UAAYX,EAAOW,GACrBE,MAMXG,oBAAqB,WACjB,MAAOP,GAASE,WAMpBM,MAAO,UAAW,aAAc,SAAUC,EAASC,GAQ/C,QAASC,GAAQV,EAAQC,GAKrBE,KAAKQ,oBACDC,MAAOJ,EAAQK,aACfC,QAASN,EAAQO,gBASrBZ,KAAKa,eAAiB,SAAUhB,GAC5B,IAAMG,KAAKQ,mBAAmBM,eAAejB,GACzC,KAAM,IAAIkB,OAAM,eAAiBlB,EAAS,wCAI9C,OAAOG,MAAKQ,mBAAmBX,IAAWG,KAAKQ,mBAAmBC,OAStET,KAAKgB,cAAgB,SAAUnB,GAC3B,MAAOP,GAAUU,KAAKQ,mBAAoBX,IAM9CG,KAAKiB,QAAUjB,KAAKa,eAAehB,GAKnCG,KAAKkB,WAAapB,EASlBE,KAAKmB,cAAgB,SAAUtB,GAC3B,GAA+B,mBAApBG,MAAKoB,WAA4B,CACxC,GAAIC,GAAI,GACR,KACIrB,KAAKa,eAAehB,GAAU,SAASyB,QAAQD,EAAGA,GAClDrB,KAAKa,eAAehB,GAAU,SAAS0B,WAAWF,GAClDrB,KAAKoB,YAAa,EACpB,MAAOI,GACLxB,KAAKoB,YAAa,GAI1B,MAAOpB,MAAKoB,YAMhBpB,KAAKyB,WAAa,IAQlBzB,KAAK0B,WAAa,SAAU/B,GACxB,MAAOK,MAAKkB,WAAalB,KAAKyB,WAAa9B,GAS/CK,KAAK2B,WAAa,SAAUvC,GACxB,IACI,MAAOb,GAAQqD,OAAOxC,GACxB,MAAOoC,GACL,MAAOpC,KAUfY,KAAK6B,aAAe,SAAUzC,GAC1B,IACI,MAAOb,GAAQuD,SAAS1C,GAC1B,MAAOoC,GACL,MAAOpC,KAUfY,KAAK+B,SAAW,SAAUpC,EAAKP,GAC3B,IACIY,KAAKiB,QAAQK,QAAQtB,KAAK0B,WAAW/B,GAAMK,KAAK2B,WAAWvC,IAC3DkB,EAAW0B,MAAM,qBACbnC,OAAQG,KAAKgB,cAAchB,KAAKiB,SAChCnB,UAAWE,KAAKkB,WAChBvB,IAAKA,EACLP,MAAOA,IAEb,MAAOoC,GACL,KAAmG,MAA9F,qBAAsB,6BAA8B,sBAAsBS,QAAQT,EAAEU,MAC/E,GAAInB,OAAM,gDAEV,GAAIA,OAAM,gCAAkCpB,EAAM,OAWpEK,KAAKmC,SAAW,SAAUxC,GACtB,MAAOK,MAAK6B,aAAa7B,KAAKiB,QAAQmB,QAAQpC,KAAK0B,WAAW/B,MASlEK,KAAKqC,QAAU,SAAU1C,GACrB,MAAOK,MAAKiB,QAAQH,eAAed,KAAK0B,WAAWvC,EAAOQ,MAS9DK,KAAKsC,YAAc,SAAU3C,GACzB,MAAMK,MAAKqC,QAAQ1C,IACnBK,KAAKiB,QAAQM,WAAWvB,KAAK0B,WAAW/B,IACxCW,EAAW0B,MAAM,uBACbnC,OAAQG,KAAKgB,cAAchB,KAAKiB,SAChCnB,UAAWE,KAAKkB,WAChBvB,IAAKA,KAGF,IARyB,GAiBxCY,EAAOgC,WASHC,IAAK,SAAU7C,EAAKP,GAChB,IAAMO,EAAK,OAAO,CAGlB,IAFAA,EAAMR,EAAOQ,GAETpB,EAAQkE,SAAS9C,GACjBpB,EAAQmE,QAAQ/C,EAAK,SAAUP,EAAOO,GAClCK,KAAK+B,SAASpC,EAAKP,IACpBY,UACA,CACH,IAAMzB,EAAQoE,UAAUvD,GAAQ,OAAO,CACvCY,MAAK+B,SAASpC,EAAKR,EAAOC,IAG9B,MAAOY,OAUX4C,IAAK,SAAUjD,EAAKP,GAChB,MAAMY,MAAK6C,IAAIlD,IAKR,GAJHK,KAAKwC,IAAI7C,EAAKP,IACP,IAaf0D,IAAK,SAAUnD,EAAKoD,GAChB,GAAIxE,EAAQyE,QAAQrD,GAAM,CACtB,GAAIsD,KAKJ,OAJA1E,GAAQmE,QAAQ/C,EAAK,SAAUuD,GACvBlD,KAAK6C,IAAIK,KAAID,EAAMC,GAAKlD,KAAKmC,SAASe,KAC3ClD,MAEIiD,EAGX,MAAMjD,MAAK6C,IAAIlD,GAERK,KAAKmC,SAASxC,GAF4B,IAArBwD,UAAUC,OAAeL,EAAM,QAW/DF,IAAK,SAAUlD,GACX,MAAOK,MAAKqC,QAAQ1C,IASxB0D,OAAQ,SAAU1D,GAWd,MAVAA,GAAMR,EAAOQ,GAETpB,EAAQyE,QAAQrD,GAChBpB,EAAQmE,QAAQ/C,EAAK,SAAUA,GAC3BK,KAAKsC,YAAY3C,IAClBK,MAEHA,KAAKsC,YAAY3C,GAGdK,MAUXsD,KAAM,SAAU3D,EAAKoD,GACjB,GAAI3D,GAAQY,KAAK8C,IAAInD,EAAKoD,EAG1B,OAFA/C,MAAKqD,OAAO1D,GAELP,GAQXmE,IAAK,WACD,GAAIN,KAUJ,OATA1E,GAAQmE,QAAQ1C,KAAKiB,QAAS,SAAU7B,EAAOO,GAC3C,GAAI6D,GAAQ7D,EAAI6D,MAAMxD,KAAKyB,WACvB+B,GAAMJ,OAAS,GAAKI,EAAM,KAAOxD,KAAKkB,aACtCsC,EAAMC,OAAO,EAAG,GAChB9D,EAAM6D,EAAME,KAAK1D,KAAKyB,aAEtBzB,KAAK6C,IAAIlD,KAAMsD,EAAMtD,GAAOK,KAAK8C,IAAInD,KAC1CK,MAEIiD,GAQXU,MAAO,WAGH,MAFA3D,MAAKqD,OAAO7D,OAAOC,KAAKO,KAAKuD,QAEtBvD,MAQX4D,MAAO,WAGH,MAFA5D,MAAKiB,QAAQ4C,QAEN7D,MAQX8D,MAAO,WACH,MAAOtE,QAAOC,KAAKO,KAAKuD,OAAOH,QASnCvD,OAAQ,SAAUA,GACd,MAAO,IAAIU,GAAOV,EAAQG,KAAKkB,aAQnC6C,UAAW,WACP,MAAO/D,MAAKiB,SAShBnB,UAAW,SAAUA,GACjB,MAAO,IAAIS,GAAOP,KAAKgB,cAAchB,KAAKiB,SAAUnB,IAQxDkE,aAAc,WACV,MAAOhE,MAAKkB,YAUhB+C,UAAW,SAAUpE,GACjB,MAAOG,MAAKmB,cAActB,IASlC,IAAIqE,IACAzD,MAAO,GAAIF,GAAO,QAASX,EAASE,WACpCa,QAAS,GAAIJ,GAAO,UAAWX,EAASE,WAG5C,OAAOoE,GAAQtE,EAASC,cAMrCvB,OAAQA,OAAOC","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .config(function ($provide) {\n\n        /**\n         * Decorate the exception handler\n         */\n        $provide.decorator('$exceptionHandler', ['$log', '$delegate', function($log, $delegate) {\n            return function(exception, cause) {\n                $log.debug('[angular-locker] - ' + exception.message);\n                $delegate(exception, cause);\n            };\n        }]);\n    })\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @return {Mixed}\n         */\n        var _value = function (value) {\n            return angular.isFunction(value) ? value() : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  obj\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (obj, value) {\n            return Object.keys(obj).filter(function (key) { return obj[key] === value; })[0];\n        };\n\n        /**\n         * Set the default driver and namespace\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker'\n        };\n\n        return {\n\n            /**\n             * Allow setting of default storage driver via `lockerProvider`\n             * e.g. lockerProvider.setDefaultDriver('session');\n             *\n             * @param {String}  driver\n             */\n            setDefaultDriver: function (driver) {\n                defaults.driver = _value(driver);\n                return this;\n            },\n\n            /**\n             * getDefaultDriver\n             */\n            getDefaultDriver: function () {\n                return defaults.driver;\n            },\n\n            /**\n             * Allow setting of default namespace via `lockerProvider`\n             * e.g. lockerProvider.setDefaultNamespace('myAppName');\n             *\n             * @param {String}  namespace\n             */\n            setDefaultNamespace: function (namespace) {\n                defaults.namespace = _value(namespace);\n                return this;\n            },\n\n            /**\n             * getDefaultNamespace\n             */\n            getDefaultNamespace: function () {\n                return defaults.namespace;\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', function ($window, $rootScope) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace) {\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            throw new Error('The driver \"' + driver + '\" was not found. Defaulting to local.');\n                        }\n\n                        // fallback gracefully to localStorage\n                        return this._registeredDrivers[driver] || this._registeredDrivers.local;\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (typeof this._supported === 'undefined') {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = '.';\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value) {\n                        try {\n                            this._driver.setItem(this._getPrefix(key), this._serialize(value));\n                            $rootScope.$emit('locker.item.added', {\n                                driver: this._deriveDriver(this._driver),\n                                namespace: this._namespace,\n                                key: key,\n                                value: value\n                            });\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                throw new Error('Your browser storage quota has been exceeded');\n                            } else {\n                                throw new Error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        return this._unserialize(this._driver.getItem(this._getPrefix(key)));\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._exists(key)) return false;\n                        this._driver.removeItem(this._getPrefix(key));\n                        $rootScope.$emit('locker.item.removed', {\n                            driver: this._deriveDriver(this._driver),\n                            namespace: this._namespace,\n                            key: key\n                        });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {self}\n                     */\n                    put: function (key, value) {\n                        if (! key) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! angular.isDefined(value)) return false;\n                            this._setItem(key, _value(value));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {Boolean}\n                     */\n                    add: function (key, value) {\n                        if (! this.has(key)) {\n                            this.put(key, value);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            angular.forEach(key, function (key) {\n                                this._removeItem(key);\n                            }, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return new Locker(driver, this._namespace);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return new Locker(this._deriveDriver(this._driver), namespace);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    }\n                };\n\n                /**\n                 * Create the driver instances\n                 *\n                 * @type {Object}\n                 */\n                var drivers = {\n                    local: new Locker('local', defaults.namespace),\n                    session: new Locker('session', defaults.namespace)\n                };\n\n                return drivers[defaults.driver];\n            }]\n        };\n\n    });\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}