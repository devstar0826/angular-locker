/*! angular-locker v1.2.0 | (c) 2015 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"sources":["angular-locker.min.js"],"names":["root","factory","define","amd","angular","exports","module","window","this","provider","_value","value","param","isFunction","_keyByVal","object","Object","keys","filter","key","_error","msg","Error","defaults","driver","namespace","eventsEnabled","separator","setDefaultDriver","getDefaultDriver","setDefaultNamespace","getDefaultNamespace","setEventsEnabled","enabled","getEventsEnabled","setSeparator","getSeparator","$get","$window","$rootScope","$parse","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","_deriveDriver","_driver","_namespace","_eventsEnabled","_separator","_watchers","_checkSupport","isUndefined","_supported","l","setItem","removeItem","e","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","extend","_setItem","oldVal","_getItem","_exists","equals","oldValue","newValue","indexOf","getItem","_removeItem","prototype","put","isObject","forEach","isDefined","add","has","get","def","isArray","items","k","arguments","length","forget","map","pull","all","split","splice","join","clean","empty","clear","count","bind","$scope","$eval","assign","self","$id","$watch","newVal","unbind","watchId","instance","getDriver","getNamespace","supported"],"mappings":"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","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return factory(root.angular);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root.angular || (window && window.angular));\n    } else {\n        factory(root.angular);\n    }\n})(this, function (angular) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @param  {Mixed}  parameter\n         * @return {Mixed}\n         */\n        var _value = function (value, param) {\n            return angular.isFunction(value) ? value(param) : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  object\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (object, value) {\n            return Object.keys(object).filter(function (key) { return object[key] === value; })[0];\n        };\n\n        /**\n         * Trigger an error\n         *\n         * @param  {String}  msg\n         * @return {void}\n         */\n        var _error = function (msg) {\n            throw new Error('[angular-locker] ' + msg);\n        };\n\n        /**\n         * Set the defaults\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker',\n            eventsEnabled: true,\n            separator: '.'\n        };\n\n        return {\n\n            /**\n             * Allow setting of default storage driver via `lockerProvider`\n             * e.g. lockerProvider.setDefaultDriver('session');\n             *\n             * @param  {String|Function}  driver\n             * @return {self}\n             */\n            setDefaultDriver: function (driver) {\n                defaults.driver = _value(driver);\n\n                return this;\n            },\n\n            /**\n             * Get the default driver\n             *\n             * @return {String}\n             */\n            getDefaultDriver: function () {\n                return defaults.driver;\n            },\n\n            /**\n             * Allow setting of default namespace via `lockerProvider`\n             * e.g. lockerProvider.setDefaultNamespace('myAppName');\n             *\n             * @param  {String|Function}  namespace\n             * @return {self}\n             */\n            setDefaultNamespace: function (namespace) {\n                defaults.namespace = _value(namespace);\n\n                return this;\n            },\n\n            /**\n             * Get the default namespace\n             *\n             * @return {String}\n             */\n            getDefaultNamespace: function () {\n                return defaults.namespace;\n            },\n\n            /**\n             * Set whether the events are enabled\n             *\n             * @param  {Boolean|Function}  enabled\n             * @return {self}\n             */\n            setEventsEnabled: function (enabled) {\n                defaults.eventsEnabled = _value(enabled);\n\n                return this;\n            },\n\n            /**\n             * Get whether the events are enabled\n             *\n             * @return {Boolean}\n             */\n            getEventsEnabled: function () {\n                return defaults.eventsEnabled;\n            },\n\n            /**\n             * Set the separator to use with namespace in keys\n             *\n             * @param  {String|Function} separator\n             * @return {self}\n             */\n            setSeparator: function (separator) {\n                defaults.separator = _value(separator);\n\n                return this;\n            },\n\n            /**\n             * Get the separator\n             *\n             * @return {String}\n             */\n            getSeparator: function () {\n                return defaults.separator;\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace) {\n\n                    /**\n                     * Out of the box drivers\n                     * \n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            _error('The driver \"' + driver + '\" was not found.');\n                        }\n\n                        return this._registeredDrivers[driver];\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * @type {Boolean}\n                     */\n                    this._eventsEnabled = defaults.eventsEnabled;\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = defaults.separator;\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (angular.isUndefined(this._supported)) {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        if (! this._namespace) return key;\n\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String}  name\n                     * @param  {Object}  payload\n                     * @return {void}\n                     */\n                    this._event = function (name, payload) {\n                        if (! this._eventsEnabled) return;\n\n                        $rootScope.$emit(name, angular.extend(payload, {\n                            driver: this._deriveDriver(this._driver),\n                            namespace: this._namespace,\n                        }));\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        try {\n                            var oldVal = this._getItem(key);\n                            this._driver.setItem(this._getPrefix(key), this._serialize(value));\n                            if (this._exists(key) && ! angular.equals(oldVal, value)) {\n                                this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: value });\n                            } else {\n                                this._event('locker.item.added', { key: key, value: value });\n                            }\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                _error('The browser storage quota has been exceeded');\n                            } else {\n                                _error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._unserialize(this._driver.getItem(this._getPrefix(key)));\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        if (! this._exists(key)) return false;\n                        this._driver.removeItem(this._getPrefix(key));\n\n                        this._event('locker.item.forgotten', { key: key });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {self}\n                     */\n                    put: function (key, value) {\n                        if (! key) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! angular.isDefined(value)) return false;\n                            this._setItem(key, _value(value, this._getItem(key)));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {Boolean}\n                     */\n                    add: function (key, value) {\n                        if (! this.has(key)) {\n                            this.put(key, value);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            key.map(this._removeItem, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace/driver\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace/driver\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     * @return {self}\n                     */\n                    bind: function ($scope, key, def) {\n                        if (angular.isUndefined( $scope.$eval(key) )) {\n                            $parse(key).assign($scope, this.get(key, def));\n                            if (! this.has(key)) this.put(key, def);\n                        }\n\n                        var self = this;\n                        this._watchers[key + $scope.$id] = $scope.$watch(key, function (newVal) {\n                            if (angular.isDefined(newVal)) self.put(key, newVal);\n                        }, angular.isObject($scope[key]));\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @return {self}\n                     */\n                    unbind: function ($scope, key) {\n                        $parse(key).assign($scope, void 0);\n                        this.forget(key);\n\n                        var watchId = key + $scope.$id;\n                        \n                        if (this._watchers[watchId]) {\n                            // execute the de-registration function\n                            this._watchers[watchId]();\n                            delete this._watchers[watchId];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return this.instance(driver, this._namespace);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return this.instance(this._deriveDriver(this._driver), namespace);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    },\n\n                    /**\n                     * Get a new instance of Locker\n                     *\n                     * @param  {String}  driver\n                     * @param  {String}  namespace\n                     * @return {Locker}\n                     */\n                    instance: function (driver, namespace) {\n                        return new Locker(driver, namespace);\n                    }\n                };\n\n                // return the default instance\n                return new Locker(defaults.driver, defaults.namespace);\n            }]\n        };\n\n    });\n\n});\n"],"sourceRoot":"/source/"}