/*! angular-locker v0.6.3 | (c) 2014 @tymondesigns | https://github.com/tymondesigns/angular-locker */
{"version":3,"file":"angular-locker.min.js","sources":["angular-locker.min.js"],"names":["window","angular","module","config","$provide","decorator","$log","$delegate","exception","cause","debug","message","provider","_value","value","isFunction","_keyByVal","obj","Object","keys","filter","key","defaults","driver","namespace","eventsEnabled","setDefaultDriver","this","getDefaultDriver","setDefaultNamespace","getDefaultNamespace","setEventsEnabled","enabled","getEventsEnabled","$get","$window","$rootScope","$parse","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","Error","_deriveDriver","_driver","_namespace","_eventsEnabled","_checkSupport","_supported","l","setItem","removeItem","e","_separator","_watchers","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","extend","_setItem","oldVal","_getItem","_exists","equals","oldValue","newValue","indexOf","getItem","_removeItem","prototype","put","isObject","forEach","isDefined","add","has","get","def","isArray","items","k","arguments","length","forget","pull","all","split","splice","join","clean","empty","clear","count","bind","$scope","isUndefined","$eval","assign","self","$id","$watch","newVal","unbind","getDriver","getNamespace","supported","drivers"],"mappings":"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","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects.\n *\n * @link https://github.com/tymondesigns/angular-locker\n * @author Sean Tymon @tymondesigns\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .config(function ($provide) {\n\n        /**\n         * Decorate the exception handler\n         */\n        $provide.decorator('$exceptionHandler', ['$log', '$delegate', function($log, $delegate) {\n            return function(exception, cause) {\n                $log.debug('[angular-locker] - ' + exception.message);\n                $delegate(exception, cause);\n            };\n        }]);\n    })\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @return {Mixed}\n         */\n        var _value = function (value) {\n            return angular.isFunction(value) ? value() : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  obj\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (obj, value) {\n            return Object.keys(obj).filter(function (key) { return obj[key] === value; })[0];\n        };\n\n        /**\n         * Set the default driver and namespace\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker',\n            eventsEnabled: true\n        };\n\n        return {\n\n            /**\n             * Allow setting of default storage driver via `lockerProvider`\n             * e.g. lockerProvider.setDefaultDriver('session');\n             *\n             * @param {String}  driver\n             */\n            setDefaultDriver: function (driver) {\n                defaults.driver = _value(driver);\n                return this;\n            },\n\n            /**\n             * Get the default driver\n             */\n            getDefaultDriver: function () {\n                return defaults.driver;\n            },\n\n            /**\n             * Allow setting of default namespace via `lockerProvider`\n             * e.g. lockerProvider.setDefaultNamespace('myAppName');\n             *\n             * @param {String}  namespace\n             */\n            setDefaultNamespace: function (namespace) {\n                defaults.namespace = _value(namespace);\n                return this;\n            },\n\n            /**\n             * Get the default namespace\n             */\n            getDefaultNamespace: function () {\n                return defaults.namespace;\n            },\n\n            /**\n             * Set whether the events are enabled\n             *\n             * @param {Boolean}  enabled\n             */\n            setEventsEnabled: function (enabled) {\n                defaults.eventsEnabled = enabled;\n                return this;\n            },\n\n            /**\n             * Get whether the events are enabled\n             */\n            getEventsEnabled: function () {\n                return defaults.eventsEnabled;\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace, eventsEnabled) {\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            throw new Error('The driver \"' + driver + '\" was not found. Defaulting to local.');\n                        }\n\n                        // fallback gracefully to localStorage\n                        return this._registeredDrivers[driver] || this._registeredDrivers.local;\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * @type {Boolean}\n                     */\n                    this._eventsEnabled = eventsEnabled;\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (typeof this._supported === 'undefined') {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = '.';\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String} name\n                     * @param  {Object} payload\n                     * @return {void}\n                     */\n                    this._event = function (name, payload) {\n                        if (this._eventsEnabled) {\n                            $rootScope.$emit(name, angular.extend(payload, {\n                                driver: this._deriveDriver(this._driver),\n                                namespace: this._namespace,\n                            }));\n                        }\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value) {\n                        try {\n                            var oldVal = this._getItem(key);\n                            this._driver.setItem(this._getPrefix(key), this._serialize(value));\n                            if (this._exists(key) && ! angular.equals(oldVal, value)) {\n                                this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: value });\n                            } else {\n                                this._event('locker.item.added', { key: key, value: value });\n                            }\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                throw new Error('Your browser storage quota has been exceeded');\n                            } else {\n                                throw new Error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        return this._unserialize(this._driver.getItem(this._getPrefix(key)));\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._exists(key)) return false;\n                        this._driver.removeItem(this._getPrefix(key));\n\n                        this._event('locker.item.forgotten', { key: key });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {self}\n                     */\n                    put: function (key, value) {\n                        if (! key) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! angular.isDefined(value)) return false;\n                            this._setItem(key, _value(value));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {Boolean}\n                     */\n                    add: function (key, value) {\n                        if (! this.has(key)) {\n                            this.put(key, value);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            angular.forEach(key, function (key) {\n                                this._removeItem(key);\n                            }, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     * @return {self}\n                     */\n                    bind: function ($scope, key, def) {\n                        if (angular.isUndefined( $scope.$eval(key) )) {\n                            $parse(key).assign($scope, this.get(key, def));\n                        }\n\n                        var self = this;\n                        this._watchers[key + $scope.$id] = $scope.$watch(key, function (newVal) {\n                            if (angular.isDefined(newVal)) self.put(key, newVal);\n                        }, angular.isObject($scope[key]));\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @return {self}\n                     */\n                    unbind: function ($scope, key) {\n                        $parse(key).assign($scope, null);\n                        this.forget(key);\n                        if (this._watchers[key + $scope]) {\n                            delete this._watchers[key + $scope];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return new Locker(driver, this._namespace, this._eventsEnabled);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return new Locker(this._deriveDriver(this._driver), namespace, this._eventsEnabled);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    }\n                };\n\n                /**\n                 * Create the driver instances\n                 *\n                 * @type {Object}\n                 */\n                var drivers = {\n                    local: new Locker('local', defaults.namespace, defaults.eventsEnabled),\n                    session: new Locker('session', defaults.namespace, defaults.eventsEnabled)\n                };\n\n                return drivers[defaults.driver];\n            }]\n        };\n\n    });\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}